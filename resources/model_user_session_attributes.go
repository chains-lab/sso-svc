/*
Cifra SSO REST API

SSO REST API for Cifra services

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"github.com/google/uuid"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserSessionAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSessionAttributes{}

// UserSessionAttributes struct for UserSessionAttributes
type UserSessionAttributes struct {
	// user id
	UserId uuid.UUID `json:"user_id"`
	// session creation date
	CreatedAt time.Time `json:"created_at"`
	// last used date
	LastUsed time.Time `json:"last_used"`
}

type _UserSessionAttributes UserSessionAttributes

// NewUserSessionAttributes instantiates a new UserSessionAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSessionAttributes(userId uuid.UUID, createdAt time.Time, lastUsed time.Time) *UserSessionAttributes {
	this := UserSessionAttributes{}
	this.UserId = userId
	this.CreatedAt = createdAt
	this.LastUsed = lastUsed
	return &this
}

// NewUserSessionAttributesWithDefaults instantiates a new UserSessionAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionAttributesWithDefaults() *UserSessionAttributes {
	this := UserSessionAttributes{}
	return &this
}

// GetUserId returns the UserId field value
func (o *UserSessionAttributes) GetUserId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserSessionAttributes) GetUserIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserSessionAttributes) SetUserId(v uuid.UUID) {
	o.UserId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserSessionAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserSessionAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserSessionAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetLastUsed returns the LastUsed field value
func (o *UserSessionAttributes) GetLastUsed() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value
// and a boolean to check if the value has been set.
func (o *UserSessionAttributes) GetLastUsedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUsed, true
}

// SetLastUsed sets field value
func (o *UserSessionAttributes) SetLastUsed(v time.Time) {
	o.LastUsed = v
}

func (o UserSessionAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSessionAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_id"] = o.UserId
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["last_used"] = o.LastUsed
	return toSerialize, nil
}

func (o *UserSessionAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_id",
		"created_at",
		"last_used",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSessionAttributes := _UserSessionAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserSessionAttributes)

	if err != nil {
		return err
	}

	*o = UserSessionAttributes(varUserSessionAttributes)

	return err
}

type NullableUserSessionAttributes struct {
	value *UserSessionAttributes
	isSet bool
}

func (v NullableUserSessionAttributes) Get() *UserSessionAttributes {
	return v.value
}

func (v *NullableUserSessionAttributes) Set(val *UserSessionAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSessionAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSessionAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSessionAttributes(val *UserSessionAttributes) *NullableUserSessionAttributes {
	return &NullableUserSessionAttributes{value: val, isSet: true}
}

func (v NullableUserSessionAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSessionAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


